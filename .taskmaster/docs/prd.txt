# Tennis Court Availability Alert System PRD

## Overview
The Tennis Court Availability Alert System is a cloud-based monitoring platform that tracks tennis court availability at local clubs and facilities. It solves the problem of manually checking booking websites by automatically monitoring court availability and sending real-time email notifications when slots become available (new slots or cancellations). Users receive instant alerts with direct booking links, allowing them to quickly secure court time while the system handles the tedious monitoring task.

## Core Value Proposition
- **Real-time Monitoring**: Continuously monitors tennis court booking websites
- **Instant Notifications**: Email alerts sent immediately when slots become available
- **Direct Booking Links**: Email includes direct links to book the available slot
- **Cloud-based**: Reliable, scalable monitoring that runs 24/7
- **Manual Booking**: Users retain full control over their booking decisions

## Core Features

### Real-time Court Monitoring
- Monitors multiple tennis venues (LTA/Clubspark, Courtsides, etc.)
- Detects new slot availability and cancellations
- Tracks court type, date, time, and pricing information
- Handles JavaScript-heavy booking sites with robust scraping

### Intelligent Alert System
- Email notifications with court details and direct booking links
- Configurable notification preferences (venues, times, court types)
- Immediate alerts when new slots match user preferences
- Clean, mobile-friendly email templates

### User Preference Management
- Configure preferred venues and court types
- Set time preferences (morning, evening, weekends)
- Maximum price thresholds
- Notification frequency controls

### Cloud Infrastructure
- Designed for deployment on AWS, GCP, or similar
- Docker-based for easy deployment and scaling
- Reliable message queuing for alert processing
- Secure credential management for venue access

## Technical Architecture

### System Components
- **Monitoring Service**: Python scrapers with Firecrawl for JavaScript sites
- **Scheduler**: Go-based cron service for periodic scraping
- **Alert Engine**: Go service for processing availability and sending notifications
- **Database**: MongoDB for venues, users, and scraping logs
- **Message Queue**: Redis for reliable task distribution
- **Email Service**: SendGrid integration for notifications

### Data Models
- **Venue**: Booking URL, venue type, location, scraping configuration
- **User**: Email, notification preferences, venue subscriptions
- **ScrapingLog**: Timestamp, venue, detected slots, availability changes
- **AlertHistory**: Track sent notifications to avoid duplicates

### Cloud Architecture Considerations
- **Containerized Services**: Docker containers for easy deployment
- **Environment Configuration**: Cloud-native config management
- **Monitoring & Logging**: Structured logging for cloud monitoring
- **Scalability**: Horizontal scaling for multiple venue monitoring
- **Security**: Secure API keys and credentials management

## User Experience

### Key User Flow
1. **Setup**: User provides email and selects venues to monitor
2. **Configuration**: Sets preferences for court types, times, price limits
3. **Monitoring**: System continuously monitors selected venues
4. **Alert**: User receives email when matching slot becomes available
5. **Booking**: User clicks link in email to book directly on venue site

### Email Notification Format
```
🎾 Court Available at Stratford Park!

Court 3 - Outdoor Hard Court
📅 Tomorrow, March 15th
⏰ 6:00 PM - 7:00 PM  
💰 £15.00

🔗 BOOK NOW: [Direct booking link]

This slot just became available - book quickly!
```

## Development Roadmap

### Phase 1: Core Monitoring (Current - 70% Complete)
- ✅ Venue scraping infrastructure
- ✅ Database schemas and data storage
- ✅ Scheduler for periodic monitoring
- ✅ Basic preference management

### Phase 2: Alert System (Next - In Progress)
- 🔄 Email notification integration (SendGrid)
- 🔄 Alert processing logic
- 🔄 Email template design
- 🔄 Duplicate notification prevention

### Phase 3: Cloud Deployment
- ⏳ Docker containerization
- ⏳ Cloud deployment configuration (AWS/GCP)
- ⏳ Environment variable management
- ⏳ Monitoring and logging setup

### Phase 4: Enhancements
- ⏳ Web dashboard for preference management
- ⏳ SMS notifications (optional)
- ⏳ Mobile app for notifications
- ⏳ Analytics on venue availability patterns

## Deployment Architecture

### Cloud Services Required
- **Compute**: Container hosting (AWS ECS, GCP Cloud Run, etc.)
- **Database**: Managed MongoDB (Atlas) or cloud equivalent
- **Cache/Queue**: Managed Redis (AWS ElastiCache, GCP Memorystore)
- **Email**: SendGrid API integration
- **Monitoring**: Cloud logging and metrics (CloudWatch, Stackdriver)

### Estimated Monthly Costs
- **Small Scale** (1-10 users): $20-50/month
- **Medium Scale** (50-100 users): $100-200/month
- **Large Scale** (500+ users): $500-1000/month

## Success Metrics
- **Alert Accuracy**: >95% of notifications should lead to actually available slots
- **Response Time**: Notifications sent within 2 minutes of slot availability
- **Uptime**: >99% monitoring uptime
- **User Satisfaction**: Users successfully book courts from 30%+ of notifications

## Technical Specifications
- **Monitoring Frequency**: Every 2-5 minutes per venue
- **Email Delivery**: <30 seconds from detection to email sent
- **Browser Support**: Email compatible with all major email clients
- **Mobile Responsiveness**: Email templates optimized for mobile viewing
- **API Response Time**: <2 seconds for preference updates 