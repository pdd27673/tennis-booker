# Tennis Booking System - Production Deployment PRD

## Executive Summary

Transform the existing tennis court scraping system into a production-ready, secure, and scalable application with modern React TypeScript frontend, enhanced security, smart database optimization, zero-cost OCI deployment, and GitHub-ready codebase with CI/CD pipeline.

## Current System Analysis

The existing system has excellent foundations:
- Go backend with MongoDB integration and Redis pub/sub
- Sophisticated scraper architecture with platform abstraction (ClubSpark, Courtside)
- Production-ready notification service with Gmail SMTP
- Vault integration for secrets management (underutilized)
- Docker containerization with health checks

Critical security issues to address:
- Hardcoded Gmail password in notification service
- Default passwords in Docker configs
- No proper authentication for API endpoints
- Secrets in environment variables instead of Vault

## Technical Requirements

### Phase 1: Foundation & Security (Week 1-2)
REQUIREMENT: Secure monorepo structure with proper secrets management

1.1 Monorepo Restructure
- Create apps/ directory with backend/, frontend/, scraper/ subdirectories
- Create packages/ for shared code
- Create infrastructure/ for deployment configs
- Create .github/ for CI/CD workflows
- Move existing Go code to apps/backend/
- Move existing Python scrapers to apps/scraper/

1.2 Security Overhaul
- Remove ALL hardcoded credentials from codebase
- Enhance Vault integration for email credentials, JWT secrets, database passwords
- Implement environment-based configuration system
- Create secure Docker setup with secrets management
- Update notification service to use Vault for Gmail credentials

### Phase 2: Modern Frontend (Week 3-4)
REQUIREMENT: Beautiful React TypeScript dashboard with authentication

2.1 Frontend Setup
- Initialize React 18 + TypeScript + Vite application
- Install and configure ShadCN UI components
- Install and configure Aceternity UI effects
- Set up Zustand for state management
- Set up React Query for API calls
- Configure Tailwind CSS with custom theme

2.2 Authentication System
- Implement JWT-based authentication with refresh tokens
- Create login/logout components
- Implement protected route wrapper
- Create user context and auth hooks
- Add token refresh logic

2.3 Dashboard Features
- Create main dashboard with real-time court monitoring
- Build user preference management interface
- Implement system control interface (pause/resume scraping)
- Add court availability cards with booking links
- Create mobile-responsive PWA layout

### Phase 3: Enhanced Backend API (Week 5-6)
REQUIREMENT: Secure REST API with proper authentication

3.1 API Authentication
- Implement JWT middleware for route protection
- Create user authentication endpoints (login, refresh, logout)
- Add user management service
- Implement password hashing with bcrypt
- Add rate limiting middleware

3.2 REST API Endpoints
- Auth endpoints: POST /auth/login, /auth/refresh, /auth/logout
- User endpoints: GET /api/users/me, PUT /api/users/preferences
- System endpoints: POST /api/system/pause, /api/system/resume, GET /api/system/status
- Court endpoints: GET /api/courts, GET /api/venues
- Health endpoint: GET /api/health

3.3 API Documentation
- Generate OpenAPI/Swagger documentation
- Add request/response validation
- Implement proper error handling and status codes

### Phase 4: Database Optimization (Week 5-6)
REQUIREMENT: Smart cleanup and efficient data management

4.1 Intelligent Data Retention
- Implement cleanup service to only store slots matching user preferences OR already notified
- Create automatic cleanup of irrelevant data older than 7 days
- Enhance deduplication logic with Redis-based tracking
- Add database indexes for performance optimization

4.2 Queue Management
- Implement error handling with exponential backoff retry logic
- Create dead letter queue for failed messages
- Add Redis queue monitoring and cleanup
- Implement message processing with proper error recovery

### Phase 5: OCI Infrastructure (Week 7)
REQUIREMENT: Zero-cost production deployment

5.1 Infrastructure as Code
- Create Terraform configuration for OCI Always Free resources
- Provision ARM Ampere A1 instance (2 OCPUs, 12GB RAM)
- Set up VCN, subnet, and security groups
- Configure block storage for data persistence

5.2 Container Orchestration
- Create production Docker Compose with Traefik for SSL termination
- Configure Let's Encrypt for automatic SSL certificates
- Set up DuckDNS for free domain management
- Deploy all services: frontend, backend, notification, scraper, MongoDB, Redis, Vault

### Phase 6: CI/CD Pipeline (Week 8)
REQUIREMENT: Automated testing and deployment

6.1 GitHub Actions Workflows
- Create automated testing workflow for Go, TypeScript, and Python
- Implement security scanning with Trivy, TruffleHog, and Semgrep
- Set up Docker image building and pushing to GitHub Container Registry
- Create automated deployment workflow to OCI instance

6.2 Quality Gates
- Enforce 95%+ test coverage requirement
- Block deployment on security vulnerabilities
- Add performance benchmarks and code quality checks
- Implement automated rollback on deployment failures

## Implementation Details

### Frontend Architecture
Use Zustand for state management with TypeScript interfaces for User, UserPreferences, CourtSlot types. Implement React Query for API calls with automatic caching and error handling. Create reusable UI components with ShadCN base components enhanced with Aceternity effects.

### Backend Security
Implement JWT authentication middleware with token validation and user context setting. Create secrets manager service to retrieve credentials from Vault. Use bcrypt for password hashing and implement rate limiting for API protection.

### Database Optimization
Create cleanup service with smart filtering to only keep relevant slots (matching user preferences or already notified, within 7 days). Implement Redis-based deduplication with expiring keys. Add MongoDB indexes for query performance.

### Infrastructure
Use Terraform to provision OCI Always Free ARM instance with proper networking and security groups. Deploy with Docker Compose using Traefik for SSL termination and service routing. Configure automatic SSL certificate renewal with Let's Encrypt.

### CI/CD Pipeline
Create comprehensive GitHub Actions workflows with parallel testing, security scanning, and automated deployment. Implement proper secret management and deployment verification with health checks.

## Success Criteria

Technical Metrics:
- 99.9% uptime
- <2 second page load times
- <1 minute notification delivery
- Zero security vulnerabilities
- 95%+ test coverage

Security Requirements:
- No hardcoded secrets in codebase
- Encrypted data at rest and in transit
- JWT-based authentication with refresh tokens
- Regular automated security scans
- Comprehensive audit logging

User Experience:
- Intuitive dashboard interface
- Real-time preference updates
- Mobile-responsive design
- PWA installation capability
- Offline functionality support

## Cost Constraints

Infrastructure must remain at $0/month using:
- OCI Always Free Tier (ARM instance, storage, networking)
- DuckDNS free subdomain
- Let's Encrypt free SSL certificates
- GitHub free CI/CD for public repositories

Optional services budget $0-45/month:
- Firecrawl API for enhanced scraping
- SendGrid for email notifications
- Twilio for SMS notifications

## Timeline

8-week implementation schedule:
- Week 1-2: Foundation & Security
- Week 3-4: Frontend Development
- Week 5-6: Backend API & Database Optimization
- Week 7: Infrastructure & Deployment
- Week 8: CI/CD & Final Testing

Each phase must be completed and tested before proceeding to the next phase to ensure system stability and security throughout the transformation process. 