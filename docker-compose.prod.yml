version: '3.8'

services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: tennis-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard (secured)
    environment:
      - ACME_EMAIL=${ACME_EMAIL}
      - DOMAIN_NAME=${DOMAIN_NAME}
      - TRAEFIK_USER=${TRAEFIK_USER}
      - TRAEFIK_PASSWORD_HASH=${TRAEFIK_PASSWORD_HASH}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./infrastructure/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./infrastructure/traefik/config:/etc/traefik/dynamic:ro
      - traefik_letsencrypt:/letsencrypt
      - traefik_logs:/var/log/traefik
    networks:
      - tennis-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN_NAME}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=traefik-auth,security-headers"

  # Frontend (React + Nginx)
  frontend:
    build:
      context: apps/frontend
      dockerfile: Dockerfile
    container_name: tennis-frontend
    restart: unless-stopped
    environment:
      - VITE_API_URL=https://api.${DOMAIN_NAME}
      - VITE_APP_NAME=Tennis Booker
    networks:
      - tennis-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN_NAME}`) || Host(`www.${DOMAIN_NAME}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.routers.frontend.middlewares=security-headers,compression,rate-limit"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      # Redirect www to non-www
      - "traefik.http.routers.frontend-www.rule=Host(`www.${DOMAIN_NAME}`)"
      - "traefik.http.routers.frontend-www.entrypoints=websecure"
      - "traefik.http.routers.frontend-www.tls.certresolver=letsencrypt"
      - "traefik.http.routers.frontend-www.middlewares=redirect-to-non-www"

  # Backend API Server
  backend:
    build:
      context: apps/backend
      dockerfile: Dockerfile
    container_name: tennis-backend
    restart: unless-stopped
    environment:
      - MONGO_URI=mongodb://admin:${MONGO_ROOT_PASSWORD}@mongodb:27017/tennis_booking?authSource=admin
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - DB_NAME=tennis_booking
      - VAULT_ADDR=http://vault:8200
      - JWT_SECRET=${JWT_SECRET}
      - PORT=8080
      - GIN_MODE=release
      - CORS_ORIGINS=${CORS_ORIGINS:-https://${DOMAIN_NAME},https://www.${DOMAIN_NAME}}
      - DOMAIN_NAME=${DOMAIN_NAME}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_healthy
    networks:
      - tennis-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.${DOMAIN_NAME}`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.routers.backend.middlewares=security-headers,compression,api-rate-limit,cors-headers"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database services
  mongodb:
    image: mongo:6.0
    container_name: tennis-mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - tennis-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7.0-alpine
    container_name: tennis-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - tennis-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vault service for secrets management
  vault:
    image: hashicorp/vault:1.16
    container_name: tennis-vault
    restart: unless-stopped
    volumes:
      - vault_data:/vault/data
      - ./infrastructure/vault/config:/vault/config:ro
      - vault_logs:/vault/logs
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_ADDR=http://0.0.0.0:8200
      - VAULT_LOCAL_CONFIG={"storage":{"file":{"path":"/vault/data"}},"listener":{"tcp":{"address":"0.0.0.0:8200","tls_disable":true}},"ui":true,"disable_mlock":true}
    networks:
      - tennis-network
    command: server
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Application services
  notification-service:
    build:
      context: apps/backend
      dockerfile: Dockerfile
    container_name: tennis-notification
    restart: unless-stopped
    environment:
      - MONGO_URI=mongodb://admin:${MONGO_ROOT_PASSWORD}@mongodb:27017/tennis_booking?authSource=admin
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - GMAIL_EMAIL=${GMAIL_EMAIL}
      - GMAIL_PASSWORD=${GMAIL_PASSWORD}
      - FROM_EMAIL=${FROM_EMAIL}
      - DB_NAME=tennis_booking
      - VAULT_ADDR=http://vault:8200
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_healthy
    networks:
      - tennis-network
    command: ["./notification-service"]
    healthcheck:
      test: ["CMD", "ps", "aux", "|", "grep", "notification-service"]
      interval: 30s
      timeout: 10s
      retries: 3

  scraper-service:
    build:
      context: apps/scraper
      dockerfile: Dockerfile
    container_name: tennis-scraper
    restart: unless-stopped
    environment:
      - MONGO_URI=mongodb://admin:${MONGO_ROOT_PASSWORD}@mongodb:27017/tennis_booking?authSource=admin
      - DB_NAME=tennis_booking
      - VAULT_ADDR=http://vault:8200
      - SCRAPER_INTERVAL=${SCRAPER_INTERVAL:-300}  # 5 minutes default
    depends_on:
      mongodb:
        condition: service_healthy
      vault:
        condition: service_healthy
    networks:
      - tennis-network
    # Run scraper with configurable interval
    command: >
      sh -c "
        while true; do
          python src/playwright_scraper.py --all
          echo 'Scraping cycle completed, waiting ${SCRAPER_INTERVAL:-300} seconds...'
          sleep ${SCRAPER_INTERVAL:-300}
        done
      "

  # Seed services (run once)
  seed-db:
    build:
      context: apps/backend
      dockerfile: Dockerfile
    container_name: tennis-seed-db
    environment:
      - MONGO_URI=mongodb://admin:${MONGO_ROOT_PASSWORD}@mongodb:27017/tennis_booking?authSource=admin
      - DB_NAME=tennis_booking
      - VAULT_ADDR=http://vault:8200
    depends_on:
      mongodb:
        condition: service_healthy
      vault:
        condition: service_healthy
    networks:
      - tennis-network
    command: ["./seed-db"]
    restart: "no"

  seed-user:
    build:
      context: apps/backend
      dockerfile: Dockerfile
    container_name: tennis-seed-user
    environment:
      - MONGO_URI=mongodb://admin:${MONGO_ROOT_PASSWORD}@mongodb:27017/tennis_booking?authSource=admin
      - DB_NAME=tennis_booking
              - USER_EMAIL=${USER_EMAIL:-mvgnum@gmail.com}
      - VAULT_ADDR=http://vault:8200
    depends_on:
      seed-db:
        condition: service_completed_successfully
      vault:
        condition: service_healthy
    networks:
      - tennis-network
    command: ["./seed-user"]
    restart: "no"

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  vault_data:
    driver: local
  vault_logs:
    driver: local
  traefik_letsencrypt:
    driver: local
  traefik_logs:
    driver: local

networks:
  tennis-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 