name: CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

jobs:
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true
          cache-dependency-path: apps/backend/go.sum
      
      - name: Build
        run: |
          cd apps/backend
          make build
      
      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-binaries
          path: apps/backend/bin/
          retention-days: 7

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: apps/frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd apps/frontend
          npm ci
      
      - name: Build application
        run: |
          cd apps/frontend
          npm run build
      
      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: apps/frontend/dist/
          retention-days: 7
  
  build-scraper:
    name: Build Scraper
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: apps/scraper/requirements.txt
      
      - name: Install dependencies
        run: |
          cd apps/scraper
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Install Playwright browsers
        run: |
          cd apps/scraper
          python -m playwright install --with-deps chromium
      
      - name: Run tests
        run: |
          cd apps/scraper
          python -m pytest tests/ -v
      
      - name: Validate package structure
        run: |
          cd apps/scraper
          python -m py_compile src/main.py
          python -c "import sys; sys.path.insert(0, 'src'); from main import main; print('✅ Entry point accessible')"
      
      - name: Prepare source artifacts
        run: |
          cd apps/scraper
          mkdir -p dist
          # Copy source files for deployment
          cp -r src dist/
          cp requirements.txt dist/
          cp README.md dist/
          cp pyproject.toml dist/
          echo "✅ Source files prepared for deployment"
      
      - name: Upload scraper artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scraper-source
          path: apps/scraper/dist/
          retention-days: 7
  
  deploy:
    name: Deploy to OCI
    needs: [build-backend, build-frontend, build-scraper]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Set up OCI CLI
        uses: oracle-actions/setup-oci@v1
        with:
          user-id: ${{ secrets.OCI_USER_OCID }}
          fingerprint: ${{ secrets.OCI_FINGERPRINT }}
          private-key: ${{ secrets.OCI_PRIVATE_KEY }}
          tenancy-id: ${{ secrets.OCI_TENANCY_OCID }}
          region: ${{ secrets.OCI_REGION }}
      
      - name: Deploy to OCI
        run: |
          echo "Deploying version ${GITHUB_REF#refs/tags/}"
          
          # Set up deployment variables
          export DEPLOY_VERSION="${GITHUB_REF#refs/tags/}"
          echo "DEPLOY_VERSION=$DEPLOY_VERSION" >> $GITHUB_ENV
          
          # TODO: Replace with your actual OCI deployment commands
          # Example deployment steps:
          
          # 1. Copy artifacts to OCI instance
          # scp -r artifacts/ user@your-oci-instance:/tmp/deploy/
          
          # 2. SSH into OCI and deploy
          # ssh user@your-oci-instance << 'EOF'
          #   cd /opt/tennis-booker
          #   
          #   # Stop existing services
          #   docker-compose -f docker-compose.prod.yml down
          #   
          #   # Update binaries
          #   cp /tmp/deploy/backend-binaries/* ./apps/backend/bin/
          #   cp -r /tmp/deploy/frontend-dist/* ./apps/frontend/dist/
          #   cp -r /tmp/deploy/scraper-package/* ./apps/scraper/dist/
          #   
          #   # Restart services
          #   docker-compose -f docker-compose.prod.yml up -d
          #   
          #   # Health check
          #   sleep 30
          #   curl -f http://localhost:8080/api/health || exit 1
          # EOF
          
          echo "⚠️  Deployment placeholder - Replace with actual OCI deployment commands"
          echo "📦 Available artifacts:"
          ls -la artifacts/ 