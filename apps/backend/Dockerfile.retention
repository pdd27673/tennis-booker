# Multi-stage build for Tennis Court Data Retention Service
FROM golang:1.23-alpine AS builder

WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY cmd/retention-service/ ./cmd/retention-service/
COPY internal/ ./internal/

# Build the retention service
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o retention-service ./cmd/retention-service

# Final stage
FROM alpine:latest

# Install ca-certificates for HTTPS requests and tzdata for timezone support
RUN apk --no-cache add ca-certificates tzdata

WORKDIR /app

# Copy the binary from builder stage
COPY --from=builder /app/retention-service .

# Create directories for logs and metrics
RUN mkdir -p /var/log /var/metrics

# Add non-root user for security
RUN addgroup -g 1001 -S retentiongroup && \
    adduser -u 1001 -S retentionuser -G retentiongroup

# Change ownership of application files and directories
RUN chown -R retentionuser:retentiongroup /app /var/log /var/metrics

# Switch to non-root user
USER retentionuser

# Set default environment variables
ENV RETENTION_CRON_EXPRESSION="0 3 * * *"
ENV RETENTION_WINDOW_HOURS="168"
ENV RETENTION_BATCH_SIZE="1000"
ENV RETENTION_DRY_RUN="false"
ENV RETENTION_LOG_LEVEL="info"
ENV RETENTION_LOG_FORMAT="json"
ENV RETENTION_ENABLE_METRICS="true"
ENV RETENTION_METRICS_FILE="/var/metrics/retention-metrics.json"
ENV DATABASE_NAME="tennis_booker"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD pgrep retention-service > /dev/null || exit 1

# Default command
CMD ["./retention-service"] 